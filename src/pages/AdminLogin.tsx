import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { loginWithUsername, getUserProfile, testSupabaseConnection } from '@/lib/supabaseClient';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Shield, Eye, EyeOff, Bug, CheckCircle, XCircle } from 'lucide-react';

const AdminLogin = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [debugMode, setDebugMode] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'unknown' | 'success' | 'failed'>('unknown');
  const navigate = useNavigate();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkConnection();
  }, []);

  const checkConnection = async () => {
    console.log('üîç Checking Supabase connection...');
    const result = await testSupabaseConnection();
    setConnectionStatus(result.success ? 'success' : 'failed');
    
    if (!result.success) {
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: ${result.error}`);
    }
  };

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    console.log('üöÄ Login attempt started');
    console.log('Form data:', { username, passwordLength: password.length });

    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!username.trim()) {
        setError('–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
      }

      if (!password.trim()) {
        setError('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
        return;
      }

      console.log('üìù Validation passed, attempting login...');

      const { data, error } = await loginWithUsername(username.trim(), password);

      if (error) {
        console.error('‚ùå Login failed with error:', error);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (error.message.includes('Invalid login credentials')) {
          setError('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
        } else if (error.message.includes('Email not confirmed')) {
          setError('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        } else if (error.message.includes('Too many requests')) {
          setError('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else {
          setError(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
        }
        return;
      }

      if (data.user) {
        console.log('‚úÖ Login successful, checking profile...');
        
        // Check if user profile exists and get role
        const profile = await getUserProfile(data.user.id);
        
        if (!profile) {
          console.error('‚ùå Profile not found for user:', data.user.id);
          setError('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
          return;
        }

        console.log('‚úÖ Profile found:', profile);

        if (profile.role === 'admin') {
          console.log('üîë Admin access granted, redirecting to admin panel');
          navigate('/admin-panel');
        } else {
          console.log('üë§ User access granted, redirecting to profile');
          navigate('/profile');
        }
      } else {
        console.error('‚ùå No user data returned');
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (err) {
      console.error('üí• Unexpected error during login:', err);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-brand-purple/20 to-brand-orange/20 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="mx-auto w-12 h-12 bg-brand-orange rounded-full flex items-center justify-center mb-4">
            <Shield className="w-6 h-6 text-white" />
          </div>
          <CardTitle className="text-2xl font-bold text-brand-darkBlue">
            –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
          </CardTitle>
          <CardDescription>
            –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
          </CardDescription>
          
          {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
          <div className="flex items-center justify-center gap-2 mt-2">
            {connectionStatus === 'success' && (
              <div className="flex items-center gap-1 text-green-600 text-sm">
                <CheckCircle className="w-4 h-4" />
                <span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase: OK</span>
              </div>
            )}
            {connectionStatus === 'failed' && (
              <div className="flex items-center gap-1 text-red-600 text-sm">
                <XCircle className="w-4 h-4" />
                <span>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase</span>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleLogin} className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              <label htmlFor="username" className="text-sm font-medium text-gray-700">
                –õ–æ–≥–∏–Ω
              </label>
              <Input
                id="username"
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                required
                disabled={loading}
                autoComplete="username"
              />
              <p className="text-xs text-gray-500">
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–Ω, –±–µ–∑ @email.com
              </p>
            </div>

            <div className="space-y-2">
              <label htmlFor="password" className="text-sm font-medium text-gray-700">
                –ü–∞—Ä–æ–ª—å
              </label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                  disabled={loading}
                  autoComplete="current-password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  disabled={loading}
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
            </div>

            <Button
              type="submit"
              className="w-full bg-brand-orange hover:bg-brand-orange/90"
              disabled={loading || connectionStatus === 'failed'}
            >
              {loading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
            </Button>
          </form>
          
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <p className="text-xs text-gray-600 text-center">
              <strong>–ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏–Ω–æ–≤:</strong><br />
              –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <code>admin</code><br />
              –ú–µ–Ω–µ–¥–∂–µ—Ä: <code>manager1</code>
            </p>
          </div>

          {/* Debug Mode Toggle */}
          <div className="mt-4 text-center">
            <button
              type="button"
              onClick={() => setDebugMode(!debugMode)}
              className="text-xs text-gray-500 hover:text-gray-700 flex items-center gap-1 mx-auto"
            >
              <Bug className="w-3 h-3" />
              {debugMode ? '–°–∫—Ä—ã—Ç—å –æ—Ç–ª–∞–¥–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É'}
            </button>
          </div>

          {/* Debug Information */}
          {debugMode && (
            <div className="mt-4 p-3 bg-gray-100 rounded-lg text-xs">
              <h4 className="font-semibold mb-2">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
              <div className="space-y-1 text-gray-600">
                <div>Supabase URL: {import.meta.env.VITE_SUPABASE_URL || '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}</div>
                <div>Anon Key: {import.meta.env.VITE_SUPABASE_ANON_KEY ? '–ù–ê–°–¢–†–û–ï–ù' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}</div>
                <div>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connectionStatus}</div>
                <div className="mt-2">
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    onClick={checkConnection}
                    className="text-xs"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                  </Button>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AdminLogin;